--------------
C programming:
--------------

-->Compilation process of the c programming
    -->preprocessing
    -->compiling
    -->assembly
    -->Linking 
    -->loader

-->Memory map 
    ->.data (intilaized global and staic variable)
    ->.bss ( non-initilaized global and static variables intilaized to 0)
    ->.text (code segment /read only)
    ->stack (local variable)
    -->heap (dynamic alloaction)

-->Storage class
    ->auto (default / value-grabage , scope-local , lifetime -within the block it is declared)
    ->register (cpu register, value-grabage, scope-local, lifetime -within the bloack it is declared)
    ->global (scope global)String length: Loop until '\0'.
String copy: Loop and copy each char.
String concatenation: Copy second string after first.
String reverse: Swap from ends.
String search: Loop and compare substrings.
String n copy: Copy n characters.
Palindrome: Compare from both ends.
Count vowels/consonants: Loop and check each char.
Change case: Use toupper/tolower or ASCII math.
    ->static ()

-->Static variable  
    ->static local ( retains value for the variable within different function call)
    -->static global (accesible only in the file in which it is declared , scope is dame as global)
    -->static function (sccesible only in the program file in whic it is declared , outside files will not be able to access)
                        (generally the function will be extern)

-->const keyword
    -->const means  read only variable  
    -->const variables should not appear on the left side of the assignment opeartor , will get lvalaue error


-->Volatile keyword 
    -->Volatile keyword tells the compiler or force the compiler not to do the optimization for that variables  
        -->the variable which are most likely to change due to external event or unexpectedly are set as Volatile   
        -->every type the variable will be read from the memory and not from the cache register 
        -->read by pin , not by latch

-->Structure and Union differnece
    -->used for the storing the variables of the differnet datatype
    -->in structure padding is used for memory allignment
    -->the size of the union is the size of the largets element of the union    
    -->padding in structure can be avoided by the pragma pack/attribute


-->What is dynamic memory allocation..?
    -->How to allocate the dynamic memory in C..?
        -->What is the differnece between the malloc and calloc
            -->int *p = (int*)malloc(5*sizeof(int));
            -->int *q = (int*)calloc (5, sizeof(int));
        -->syntax of the malloc and calloc  
        -->What does the malloc returns.
        -->What is the use of the free()
            free(p);
            free(q);
        -->How to realoocate the dynamic memory with differnet size 
            -->realloc syntax

-->What is pointer
    Pointer is the variable which is used to store the memeory adddres of the another variables
    -->the value of the pointer variable is the address of the naother variable;

-->What is NULL pointer
    -->the pointer which is not pointing to anywhere.

-->What is the dangling pointer
    -->A dangling pointer is as pointer that points to the memory that has already been freed.

-->What is memory leakage..?
    -->when the user or developer forget to free the dynamicaly allocated memory , then memory leak occurs

-->What  is segmentation fault, when can it occur..?
    -->segmentaion fault can occur for multiple reason
    -->when stack is full, When we are trying to acccess out of bound memory.

-->What is array
    -->Array is the derived data type which is used to store the variable of the same data type
        -->in the consecutive memeory order.

-->What is string
    -->String is basically the chacter array ending the with the null terminator or null chancter '\0'.

-->What is funcion, function pointer, callback function..?
    -->Pointer storing the function address is function pointer
        void (*fun_ptr)(int);
    -->Calloback function
        -->Passing function pointer as and argument to another another
        void call_back(void (*f)()) { f(); }


-->
#######################################################################################################################
Coding Questions :
------------------
-->General :
    -->fibonacci series 
        int a = 0, b = 1, n = 10, c;
        printf("%d %d ", a, b);
        for(int i = 2; i < n; i++) {
            c = a + b;
            printf("%d ", c);
            a = b;
            b = c;
        }

    -->factorial of the number(iterative and recuusrive approch)
        int main()
        {
            int num=0;
            int fact=1;
            printf("Enter the number\n");
            scanf("%d",&num);
            //while(num !=0)
            for (int i=num; i>0;i--)
            {
                fact = fact*i;

            }
            printf("%d\n",fact);

            return 0;
        }

    -->decimal to binary and binary to decimal conversion


    -->Print the prime number in between the given range
    -->Check if the given number is prime number
    -->




-->Array:
    -->display the array ellements 
    -->reverse the array elements
    -->Sum , Average of array elements
    -->smallest and largest elements in the array
    -->second largest element in the array
    -->insert the array elelement at position
    -->Allocate the memory for the 5 integer elements in the array dynamically
    -->Search the specific value in the array
    

-->String :
    -->Custom function for 
        -->String length
            while(*str != '\0')
            {
                count++;
                str++;
            }

        -->String copy
        -->string concatation
        -->String reverse
        -->String Search
        -->String n copy

    -->chekc if the string is pallindrome 
    -->count the vowels and consenenet
    -->Change the case of the string
    -->

-->Bitwise :
    -->Combine two 16-bit into 32-bit: (a << 16) | b
    -->Check bit set: (num & (1 << n))
    -->Count set/reset bits: Loop and count.
    -->Set/reset/toggle bit: Use bitwise OR/AND/XOR.
    -->Swap even/odd bits: Use masks and shifts.
    -->Set leftmost bit: Find highest bit, set it.
    -->Swap numbers: Use XOR swap.


-->Linked List :
    -->Create a list 
    -->Display, Insert at start, Insert at end, delete at start, delete at end, 
    -->delete at position , Insert at position,
    -->reverse the linked list
    -->Find the middle element of the list
    -->Find if there is a loop in the list
    -->find the list is cicular or not
    
-->Stack (using array and linked list)
    -->Stack operations:
        -->Push
        -->pop 
        -->display
        -->is empty
        -->is full
        -->find the top elements

-->queue(using array and linked list)    
    -->Queue operations
        -->enter queue
        -->delete queue
        -->display
        -->is empty
        -->is full
    -->circular queue




#######################################################################################################################
Operating System Questions :

-->What is the difference between the process and thread
    Process is the program is execution 
    -->Seperate emeory space
    -->Heavyweight
    -->Required IPC (inter process communication) for communication between differnet process

    Thread is the smallest unit of excution in side process
    -->Shared memory space between the differnet threads of the same program
    -->lightweight
    -->shared data.

    -->What is differnent process statte
        -->create (process is created) 
        -->Ready (Process is in the ready queue waiting for the executiion to starting)
        -->Running (process is executing)
        -->Waitiing (process is interrupted , either beacuse of other process, or waiting for some I/O event to happen)
        -->Terminated (Process has competed it execution and terminated)

    -->What is zombie process
        -->A Zombie process is a process that has completed execution (it has terminated),
             but still has an entry in the process table.
    
    -->How new process is created
        -->We can create the new process with the fork system call

-->What is scheduling
    -->differnet scheduling alogorithm
    -->round robin
    -->smalest task first
    -->FCFS (first comes first serve)
    -->

-->

-->What is user space and kernel space
    -->how user space communicates with kernel space
    
-->What is system call
    -->

-->What is context switch
    
-->What is deadlock
        -->Deadlock is a situation where a set of processes are blocked because each process is holding a
        resource and waiting for another resource acquired by some other process.
        Deadlock can arise if following four conditions hold simultaneously (Necessary
        Conditions)
        
        Mutual Exclusion: One or more than one resource are non-sharable (Only one process can
        use at a time)
        Hold and Wait: A process is holding at least one resource and waiting for resources.
        No Preemption: A resource cannot be taken from a process unless the process releases the
        resource.
        Circular Wait: A set of processes are waiting for each other in circular form
    
-->what is race condition

-->What is automic operation

-->What is mutex
    -->What is mutex lock

-->What is semaphore

-->What is binary semaphore

-->What is spinlock

-->What is virtual memory 

-->What is paging 

-->Whats is external and internal fragmenattion

-->What is page swapping

-->What is monolithic and micro kenrel

-->What is interrupt
    -->top half
    -->bottom half
        -->tasklet
        -->softirq

-->What is IPC..? Types of IPC
    -->pipe 
    -->message queue
    -->shared memeory
    -->socket
    -->

-->What is multithreading

###############################################################################################

-->Device Driver And Board Support Package
------------------------------------------
-->What is device Driver

-->What is kenrel module

-->What is staticlayy and dynamically loadable driver module

-->What is device tree

-->What is co-relation between the device tree and device driver

-->What is pinmuxing

-->Explain the boot sequence of the ARM machine
    -->POST (power on self test)(RESET vector)
        -->points to ROM starting address
        -->do the basic hardware sanity check,

    -->BOOTLOADER(PL)

    -->seconadray boot loader

    -->kernel

    -->init process

    -->user space

-->What is board support Package

-->How we can add the new board files support in our system
//L&T
-->Differnece between the kmalloc and malloc

-->Can we map the kernel dynamic memeory to user applications and vice versa

--> Whta is the entry point of the driver

-->What operation /funcionality it performs

-->What is container of macro 

-->kernel utilities like mmap
//

-->What is ioremap

-->What is virtual memory and its usage

-->What is IPC , explain message queue





### Windriver / C / OS Interview Questions with Answers

-->Q: What is the difference between undefined and undeclared?**  
-->A: 
- **Undefined:** The variable or function is declared but not defined (e.g., function prototype exists, but no body).
- **Undeclared:** The variable or function is used without any declaration in the code.

---

-->Q: Where is the command line argument stored in the memory segment?**  
-->A:  
Command line arguments (`argv`) are stored on the **stack** segment of the process memory.

---

**Q: What memory segments are separate and shared between threads?**  
**A:  
- **Separate:** Stack (each thread has its own stack)
- **Shared:** Heap, global/static data, code segment (text)

---

**Q: What happens if we use a macro which is not defined?**  
**A:**  
The preprocessor replaces it with nothing (empty), which may cause a compilation error if used in code.

---

**Q: What is a message queue?**  
**A:**  
A message queue is an IPC (Inter-Process Communication) mechanism that allows processes or threads to exchange messages in a FIFO manner.

---

**Q: Where is the definition of printf present?**  
**A:**  
The definition of `printf` is in the C standard library, specifically in the file `stdio.h` and implemented in the standard C library (like `libc`).

---

**Q: What is the difference between a static library and a dynamic library?**  
**A:**  
- **Static library (.a/.lib):** Linked at compile time, becomes part of the executable.
- **Dynamic library (.so/.dll):** Linked at runtime or load time, not part of the executable.

---

**Q: When should we use static and dynamic libraries?**  
**A:**  
- **Static:** When you want all code in a single executable, no external dependencies.
- **Dynamic:** When you want to share code between programs, reduce executable size, or allow updates without recompiling.

---

**Q: In baremetal, which type of library linking will happen and why?**  
**A:**  
**Static linking** is used in baremetal systems because there is no OS to load dynamic libraries at runtime.

---

**Q: How does the kernel know which type of file we are trying to open and read/write?**  
**A:**  
The kernel uses the file's metadata (like file type, permissions, device numbers) and the file system's implementation to determine how to handle the file.

---

**Q: What is a function pointer?**  
**A:**  
A function pointer is a variable that stores the address of a function and can be used to call the function indirectly.

---

**Q: 0xabcd1234 swap nibble a and 3, swap 16 bytes**  
**A:**  
- **Swap nibble a and 3:**  
  - Nibble positions: 0xabcd1234  
  - Swap the first nibble (a) and the fourth nibble (3):  
  - Result: 0x3bcd12a4  
- **Swap 16 bytes:**  
  - If you mean swap the two 16-bit halves:  
  - 0xabcd1234 → 0x1234abcd

-